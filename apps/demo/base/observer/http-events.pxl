import px

# Define the query
df = px.DataFrame(table='http_events')

# Grab the command line from the metadata
df['cmdline'] = df['upid'].map(lambda upid: px.upid_to_cmdline(upid))

# Rename 'time_' to 'time'
df['time'] = df['time_']

# Determine role and boundary
df['role'] = df['trace_role'].map(lambda x: 'client' if x == 1 else 'server')
df['boundary'] = df['remote_addr'].map(lambda x: 'internal' if px.ip_to_service_id(x) else 'external')

# Concatenate major and minor versions
df['http_version'] = df['major_version'].map(str) + '.' + df['minor_version'].map(str)

# Extract Kubernetes context
k8s_ctx = ['namespace', 'service', 'host', 'node', 'pod', 'container']
for key in k8s_ctx:
    df[f'kubernetes_{key}'] = df['ctx'][key]

# Select desired columns
selected_columns = ['time', 'cmdline', 'upid', 'latency', 'http_version', 'role', 'boundary',
                    'req_method', 'req_path', 'remote_addr', 'remote_port',
                    'resp_status', 'resp_message'] + [f'kubernetes_{key}' for key in k8s_ctx]
df = df[selected_columns]

# Output the dataframe
px.display(df)
